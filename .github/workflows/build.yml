name: Test

on:
  push:
    branches:
      - '*'
  pull_request:

jobs:
  build:

    runs-on: "ubuntu-20.04"
    strategy:
      matrix:
        php-versions: [ '7.1', '7.2', '7.3', '7.4', '8.0', '8.1' ]
        coverage-driver: [ 'pcov' ]

    steps:
    - uses: actions/checkout@v2

    - name: Install PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}

    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      #if: steps.composer-cache.outputs.cache-hit != 'true'
      uses: php-actions/composer@v6
      with:
        args: --prefer-dist
        version: 1
        php_version: ${{ matrix.php-versions }}

    - name: Coding Standard Checks
      run: PHP_CS_FIXER_IGNORE_ENV=1 ./bin/php-cs-fixer fix --dry-run -v

    - name: Static Analysis
      run: ./bin/psalm

    - name: Test
      run: ./bin/phpunit -d memory_limit=-1 --coverage-clover clover.xml

    - name: Upload coverage to Codecov
      if: ${{ matrix.php-versions  == '7.1' }}
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  publish_docker_images:
    needs: build
    runs-on: "ubuntu-20.04"

    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Docker meta
      id: meta
      uses: crazy-max/ghaction-docker-meta@v2
      with:
        images: phparkitect/phparkitect
        tags: |
          type=raw,value=latest,enable=${{ endsWith(github.ref, 'main') }}
          type=ref,event=tag
        flavor: |
          latest=false
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
